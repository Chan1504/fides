{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Fides Fides [pronounced /fee-dhez/ , from Latin: Fid\u0113s] is an open-source privacy as code (PaC) tool by Ethyca that allows you to easily declare your systems' privacy characteristics, track privacy related changes to systems & data in version control, and enforce policies in both your source code and your runtime infrastructure. This includes support for major privacy regulations (e.g. GDPR , CCPA and LGPD ) and standards like ISO 19944 by default. Fides can manage both enforcement of privacy in your CI pipeline and orchestration of data privacy requests in your runtime environment. TODO: Insert video - \"Below, Ethyca founder and CEO, Cillian Kieran describes how Fides can help solve common privacy challenges. Why is it called Fides? Fides was the goddess of trust and good faith in Roman paganism. Fides represented everything that was required for \"honor and credibility\" in every aspect of Roman life. In addition to this, Fides means \"reliability\": reliability between two parties, which is always reciprocal . As we considered naming conventions, Fides stood out for her embodiment of this project's philosophy - to provide developers with a powerful tool to make privacy a default feature of any software. If you'd like a brief Roman mythology lesson, check out Fides on Wikipedia . Key Features Privacy as Code You describe your datasets and code using Fides' high-level description language in human-readable, declarative manifest files. This allows you to create a consistent, versioned definition of privacy characteristics in your code to automate reporting, evaluate risk and execute policies against. Automated Privacy Checks Fides integrates with git using the fidesctl tool to allow you to automate privacy checks in your CI pipeline and evalute changes against your privacy policies on each commit. This allows you to review changes and assure they meet your privacy policies before deployment. Support all Privacy Standards Fides ships with a comprehensive taxonomy that allows you to efficiently describe the privacy behaviors of your system for major regulations, including GDPR , CCPA and LGPD as well as major standards like ISO 19944 . Extensible Taxonomy Fides' taxonomy can be easily extended, allowing teams to add support for system specific concepts or data types while inheriting concepts to ensure compliance with global privacy regulations. Automate Privacy Reporting Fides' declarations can be configurd to automatically generate privacy review reports suitable privacy and legal team review. This allows developers to focus on implementation while providing privacy teams with greater insight into the software's privac behavior. Data Privacy Rights Automation Fides' data orchestration capabilities mean you can use declarations to generate complex data rights automated processes that execute automatically against user's privacy rights requests. This allows you to easily configure automated, API driven privacy requests for access, erasure and de-identification of data. About Ethyca The Makers of Fides The mission of Ethyca is to make internet scale technology respectful and ethical. We're a venture backed privacy technology team headquartered in New York, but working as a distributed team across the US to solve what we believe is the most important problem in technology today, and that is - We believe the solution to this is low friction dev tools that integrate with your existing CI pipelines to make privacy a feature of your tech stack as effortlessly as any other feature of your system. Fides is a universally understandable, open source definition language on top of which we'll build privacy tools for the next decade. What We Believe Data privacy is a human right that should be a native feature of any respectful technology. Today building great privacy as a feature in software is friction filled and complicated. We're building open source privacy tools for the developer community because we believe the only way to achieve a respectful internet is to make privacy an easy-to-implement layer of any tech stack. The Future We've been working on this problem for three years already and have a clear view of our next five year. We're excited about the roadmap of features we'll add to Fides in order to make it comprehensive tool for addressing the major challenges of privacy in both the code management and runtime environments. This means building solutions for automated privacy analysis, as well as context rich data classification, automated data orchestration for privacy righs and semantic access control models. If you're interested in solving some of the toughest and most important problems facing internet scale data-driven software, join us now . Your Participation Fides' success is predicated on your participation -- Privacy as Code can only become a reality if we ensure it's easy to understand, implement and an interopable standard for wide adoption. Your feedback, contributions and improvements are encouraged as we work towards building a community with the sole objective of building more repsectful software for everyone on the internet. Next: Tutorial To start learning how Fides works, visit the Tutorial page to walkthrough using the taxonomy, annotating datasets and systems, writing and evaluating policies, and more. Welcome!","title":"Home"},{"location":"#introduction-to-fides","text":"Fides [pronounced /fee-dhez/ , from Latin: Fid\u0113s] is an open-source privacy as code (PaC) tool by Ethyca that allows you to easily declare your systems' privacy characteristics, track privacy related changes to systems & data in version control, and enforce policies in both your source code and your runtime infrastructure. This includes support for major privacy regulations (e.g. GDPR , CCPA and LGPD ) and standards like ISO 19944 by default. Fides can manage both enforcement of privacy in your CI pipeline and orchestration of data privacy requests in your runtime environment. TODO: Insert video - \"Below, Ethyca founder and CEO, Cillian Kieran describes how Fides can help solve common privacy challenges.","title":"Introduction to Fides"},{"location":"#why-is-it-called-fides","text":"Fides was the goddess of trust and good faith in Roman paganism. Fides represented everything that was required for \"honor and credibility\" in every aspect of Roman life. In addition to this, Fides means \"reliability\": reliability between two parties, which is always reciprocal . As we considered naming conventions, Fides stood out for her embodiment of this project's philosophy - to provide developers with a powerful tool to make privacy a default feature of any software. If you'd like a brief Roman mythology lesson, check out Fides on Wikipedia .","title":"Why is it called Fides?"},{"location":"#key-features","text":"","title":"Key Features"},{"location":"#privacy-as-code","text":"You describe your datasets and code using Fides' high-level description language in human-readable, declarative manifest files. This allows you to create a consistent, versioned definition of privacy characteristics in your code to automate reporting, evaluate risk and execute policies against.","title":"Privacy as Code"},{"location":"#automated-privacy-checks","text":"Fides integrates with git using the fidesctl tool to allow you to automate privacy checks in your CI pipeline and evalute changes against your privacy policies on each commit. This allows you to review changes and assure they meet your privacy policies before deployment.","title":"Automated Privacy Checks"},{"location":"#support-all-privacy-standards","text":"Fides ships with a comprehensive taxonomy that allows you to efficiently describe the privacy behaviors of your system for major regulations, including GDPR , CCPA and LGPD as well as major standards like ISO 19944 .","title":"Support all Privacy Standards"},{"location":"#extensible-taxonomy","text":"Fides' taxonomy can be easily extended, allowing teams to add support for system specific concepts or data types while inheriting concepts to ensure compliance with global privacy regulations.","title":"Extensible Taxonomy"},{"location":"#automate-privacy-reporting","text":"Fides' declarations can be configurd to automatically generate privacy review reports suitable privacy and legal team review. This allows developers to focus on implementation while providing privacy teams with greater insight into the software's privac behavior.","title":"Automate Privacy Reporting"},{"location":"#data-privacy-rights-automation","text":"Fides' data orchestration capabilities mean you can use declarations to generate complex data rights automated processes that execute automatically against user's privacy rights requests. This allows you to easily configure automated, API driven privacy requests for access, erasure and de-identification of data.","title":"Data Privacy Rights Automation"},{"location":"#about-ethyca","text":"","title":"About Ethyca"},{"location":"#the-makers-of-fides","text":"The mission of Ethyca is to make internet scale technology respectful and ethical. We're a venture backed privacy technology team headquartered in New York, but working as a distributed team across the US to solve what we believe is the most important problem in technology today, and that is - We believe the solution to this is low friction dev tools that integrate with your existing CI pipelines to make privacy a feature of your tech stack as effortlessly as any other feature of your system. Fides is a universally understandable, open source definition language on top of which we'll build privacy tools for the next decade.","title":"The Makers of Fides"},{"location":"#what-we-believe","text":"Data privacy is a human right that should be a native feature of any respectful technology. Today building great privacy as a feature in software is friction filled and complicated. We're building open source privacy tools for the developer community because we believe the only way to achieve a respectful internet is to make privacy an easy-to-implement layer of any tech stack.","title":"What We Believe"},{"location":"#the-future","text":"We've been working on this problem for three years already and have a clear view of our next five year. We're excited about the roadmap of features we'll add to Fides in order to make it comprehensive tool for addressing the major challenges of privacy in both the code management and runtime environments. This means building solutions for automated privacy analysis, as well as context rich data classification, automated data orchestration for privacy righs and semantic access control models. If you're interested in solving some of the toughest and most important problems facing internet scale data-driven software, join us now .","title":"The Future"},{"location":"#your-participation","text":"Fides' success is predicated on your participation -- Privacy as Code can only become a reality if we ensure it's easy to understand, implement and an interopable standard for wide adoption. Your feedback, contributions and improvements are encouraged as we work towards building a community with the sole objective of building more repsectful software for everyone on the internet.","title":"Your Participation"},{"location":"#next-tutorial","text":"To start learning how Fides works, visit the Tutorial page to walkthrough using the taxonomy, annotating datasets and systems, writing and evaluating policies, and more. Welcome!","title":"Next: Tutorial"},{"location":"ci_reference/","text":"CI Reference Implementations (todo)","title":"CI Reference Implementations"},{"location":"ci_reference/#ci-reference-implementations","text":"(todo)","title":"CI Reference Implementations"},{"location":"cli/","text":"Fidesctl CLI The Fidesctl CLI wraps the entire functionality of Fidesctl into a few succint commands. Commands This is a non-exhaustive list of available Fidesctl CLI commands: fidesctl apply <manifest_dir> [--dry] [--diff] - Creates or Updates resources found within the YAML file(s) at the specified path. fidesctl evaluate [-k,--fides-key] [-m, --message] [--dry] - Runs an evaluation of all policies, but a single policy can be specified using the --fides-key parameter. fidesctl init-db - Sets up the database by running all missing migrations. fidesctl get <resource_type> <fides_key> - Looks up a specific resource on the server by its type and fides_key . fidesctl ls <resource_type> - Shows a list of all resources of a certain type that exist on the server. fidesctl ping - Pings the API's healthcheck endpoint to make sure that it is reachable and ready for requests. fidesctl reset-db - Tears down the database, erasing all data. fidesctl version - Shows the version of Fides that is installed. fidesctl view-config - Show a JSON representation of the config that Fidesctl is using.","title":"CLI"},{"location":"cli/#fidesctl-cli","text":"The Fidesctl CLI wraps the entire functionality of Fidesctl into a few succint commands.","title":"Fidesctl CLI"},{"location":"cli/#commands","text":"This is a non-exhaustive list of available Fidesctl CLI commands: fidesctl apply <manifest_dir> [--dry] [--diff] - Creates or Updates resources found within the YAML file(s) at the specified path. fidesctl evaluate [-k,--fides-key] [-m, --message] [--dry] - Runs an evaluation of all policies, but a single policy can be specified using the --fides-key parameter. fidesctl init-db - Sets up the database by running all missing migrations. fidesctl get <resource_type> <fides_key> - Looks up a specific resource on the server by its type and fides_key . fidesctl ls <resource_type> - Shows a list of all resources of a certain type that exist on the server. fidesctl ping - Pings the API's healthcheck endpoint to make sure that it is reachable and ready for requests. fidesctl reset-db - Tears down the database, erasing all data. fidesctl version - Shows the version of Fides that is installed. fidesctl view-config - Show a JSON representation of the config that Fidesctl is using.","title":"Commands"},{"location":"deployment/","text":"Deployment For production deployments of Fidesctl, we suggest deploying everything individually as opposed to using the included docker-compose file. While docker-compose is great for development and experimentation, it isn't suited to production use. The following guide will walk you through setting up each component of Fidesctl as a production-grade deployment. Requirements Install Postgres 12 Install Python 3.8 or newer (including pip) Install Fidesctl via pip -> pip install fidesctl Setup Step 1: Database Spin up a Postgresql DB and configure a user, password and database for Fidesctl to use. For example: 1 2 3 POSTGRES_USER=\"fidesctl_db\" POSTGRES_PASSWORD=\"f1d3sctl_dB\" POSTGRES_DATABASE=\"fidesctl_db\" Step 2: Create a Config The next step is to create a fidesctl.toml config file. This is used to pass important variables to the Fidesctl applications for connections to the database, api, etc. Make sure that the username, password and database in the database_url connection string match what you used to configure your database. Fidesctl will automatically look for the fidesctl.toml file in the current directory, in the user directory, or at the path specified by an optional FIDESCTL_CONFIG_PATH environment variable. Additionally, any variable can be overriden by using a properly formatted environment variable. For instance to overwrite the database_url configuration value, you would set the FIDESCTL__API__DATABASE_URL environment variable. The following is an example fidesctl.toml : 1 2 3 4 5 [cli] server_url = \"http://localhost:8080\" [api] database_url = \"postgresql+psycopg2://fidesctl_db:fidesdb@localhost:5432/fidesctl_db\" Step 3: Fidesctl API Next we need to prepare the database to be used by the API. Run the initial database setup via the fidesctl CLI: 1 fidesctl init-db Now open a new terminal to run the API, as it will run there indefinitely: fidesctl webserver The webserver should now be available at localhost:8080 , and docs are available at localhost:8080/docs , however the API docs can be safely ignored, as the Fidesctl CLI will abstract the API layer. Step 4: Fidesctl CLI The last step is to check that everything is working! Open a new terminal window and run the following: fidesctl ping If everything is configured correctly, it will let you know that the command was successful! You've now successfully completed a complete Fidesctl deployment.","title":"Deployment"},{"location":"deployment/#deployment","text":"For production deployments of Fidesctl, we suggest deploying everything individually as opposed to using the included docker-compose file. While docker-compose is great for development and experimentation, it isn't suited to production use. The following guide will walk you through setting up each component of Fidesctl as a production-grade deployment.","title":"Deployment"},{"location":"deployment/#requirements","text":"Install Postgres 12 Install Python 3.8 or newer (including pip) Install Fidesctl via pip -> pip install fidesctl","title":"Requirements"},{"location":"deployment/#setup","text":"","title":"Setup"},{"location":"deployment/#step-1-database","text":"Spin up a Postgresql DB and configure a user, password and database for Fidesctl to use. For example: 1 2 3 POSTGRES_USER=\"fidesctl_db\" POSTGRES_PASSWORD=\"f1d3sctl_dB\" POSTGRES_DATABASE=\"fidesctl_db\"","title":"Step 1: Database"},{"location":"deployment/#step-2-create-a-config","text":"The next step is to create a fidesctl.toml config file. This is used to pass important variables to the Fidesctl applications for connections to the database, api, etc. Make sure that the username, password and database in the database_url connection string match what you used to configure your database. Fidesctl will automatically look for the fidesctl.toml file in the current directory, in the user directory, or at the path specified by an optional FIDESCTL_CONFIG_PATH environment variable. Additionally, any variable can be overriden by using a properly formatted environment variable. For instance to overwrite the database_url configuration value, you would set the FIDESCTL__API__DATABASE_URL environment variable. The following is an example fidesctl.toml : 1 2 3 4 5 [cli] server_url = \"http://localhost:8080\" [api] database_url = \"postgresql+psycopg2://fidesctl_db:fidesdb@localhost:5432/fidesctl_db\"","title":"Step 2: Create a Config"},{"location":"deployment/#step-3-fidesctl-api","text":"Next we need to prepare the database to be used by the API. Run the initial database setup via the fidesctl CLI: 1 fidesctl init-db Now open a new terminal to run the API, as it will run there indefinitely: fidesctl webserver The webserver should now be available at localhost:8080 , and docs are available at localhost:8080/docs , however the API docs can be safely ignored, as the Fidesctl CLI will abstract the API layer.","title":"Step 3: Fidesctl API"},{"location":"deployment/#step-4-fidesctl-cli","text":"The last step is to check that everything is working! Open a new terminal window and run the following: fidesctl ping If everything is configured correctly, it will let you know that the command was successful! You've now successfully completed a complete Fidesctl deployment.","title":"Step 4: Fidesctl CLI"},{"location":"fides_resources/","text":"Fides Resource Types This page describes the various resources that make up the Fides platform. Resource Relationship Diagram Organization An organization is a logical grouping of resources, and all resources must belong to an organization. Fides includes a default organization with an id of 1. Example Manifest 1 2 3 4 organization : fides_key : test_organization name : Test Organization description : A test organization used to check the validity of changes. Name Type Description fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this organization description String A description of what this organiztion encapsulates Privacy Classifiers Fides uses four classifiers for describing how systems use privacy data, and for describing what privacy data can be used in what ways. All of these types support organization into hierarchical trees. Data Category A Data Category describes the real-world attribute that the data describes: date of birth, tax ID, home address, and so on. Example Manifest 1 2 3 4 5 data_category : - fides_key : user.provided.identifiable.date_of_birth name : Date of Birth parent_key : user.provided.identifiable description : User's date of birth. Example Hierarchy 1 2 3 4 5 6 7 8 9 10 11 12 13 - user - user.provided - user.provided.identifiable - user.provided.identifiable.date_of_birth - user.provided.identifiable.job_title user.provided.nonidentifiable - user.derived - user.derived.identifiable - user.derived.nonidentifiable - account - account.contact - account.payment - system Name Type Description organization_fides_key Optional[Int] Id of the organization this data category belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data category parent_key Optional[FidesKey] the fides_key of the parent category description String A description of what this data category means or encapsulates Data Use A Data Use describes what the data is being used for. Example Manifest 1 2 3 4 data_use : - fides_key : provide.system.operations.support name : Operations Support parent_key : provide.system.operations Example Hierarchy 1 2 3 4 5 6 7 8 9 10 - provide - provide.system - provide.system.operations - provide.system.operations.support - provide.system.upgrades - third_party_sharing - third_party_sharing.payment_processing - third_party_sharing.personalized_advertising - third_party_sharing.fraud_detection - third_party_sharing.legal_obligation Name Type Description organization_fides_key Optional[Int] Id of the organization this data use belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data use parent_key Optional[FidesKey] the fides_key of the parent category description String A description of what this data use means or encapsulates Data Subject A Data Subject describes who the data belongs to. Example Manifest 1 2 3 4 data_subject : - fides_key : anonymous_user name : Anonymous User description : A user without any identifiable information tied to them. Example Hierarchy 1 2 3 - customer - supplier - employee Name Type Description organization_fides_key Optional[Int] Id of the organization this data subject belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data subject description String A description of what this data subject means or encapsulates Data Qualifier A Data Qualifier describes how private the data being used is. The hierarchy for Data Qualifiers is in order of increasing exposure. Example Manifest 1 2 3 4 data_qualifier : - fides_key : aggregated_data name : Aggregated Data description : Aggregated data is statistical data that does not contain individual-level entries and is combined from information about enough different persons that individual-level attribtures are not identifiable. Example Hierarchy 1 2 3 4 5 - aggregated data - anonymized data - unlinked pseudonymized data - pseudonymized data - identified data Name Type Description organization_fides_key Optional[Int] Id of the organization this data qualifier belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data qualifier description String A description of what this data qualifier means or encapsulates Registry A registry can optionally be used to group systems. Example Manifest 1 2 3 4 5 registry : - organization_fides_key : 1 fides_key : user_systems_registry name : User Systems Registry description : A registry for all of the user-related systems. Name Type Description organization_fides_key Int Id of the organization this registry belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this registry description String A description of what this registry means or encapsulates System A system represents the privacy usage of a single software project, service, codebase, or application. Example Manifest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 system : - organization_fides_key : 1 fides_key : demo_analytics_system name : Demo Analytics System description : A system used for analyzing customer behaviour. system_type : Service privacy_declarations : - name : Analyze customer behaviour for improvements. data_categories : - user.provided.identifiable.contact - user.derived.identifiable.device.cookie_id data_use : improve.system data_subjects : - customer data_qualifier : identified_data dataset_references : - demo_users_dataset system_dependencies : [] Name Type Description organization_fides_key Int Id of the organization this system belongs to registry_id Optional[Int] Id of the registry this system belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' system_type String The type of system being declared meta Dict[String, String] A key-value pair field to add various additional info privacy_declarations List[PrivacyDeclaration] A list of privacy declarations (see Privacy Declaration below) system_dependencies List[FidesKey] Systems that this system depends on, identified by their fides_key Privacy Declaration A Privacy Declaration describes the usage of data within a system. It is included as a composite resource within a system declaration. Name Type Description data_categories List[FidesKey] The DataCategories for this PrivacyDeclaration data_subjects List[FidesKey] The DataSubjects for this PrivacyDeclaration data_use List[FidesKey] The DataUse of this PrivacyDeclaration data_qualifier List[FidesKey] The DataQualifier for this PrivacyDeclaration dataset_refereneces List[FidesKey] The fides_key(s) of the DatasetFields that this PrivacyDeclaration leverages. A Privacy Declaration can be read as \"This system uses data in categories data_categories for data_subjects with the purpose of data_use at a qualified privacy level of data_qualifier \" Dataset A Dataset represents any kind of place where data is stored and includes a sub-resource that describes the fields within that dataset. Example Manifest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 dataset : - organization_fides_key : 1 fides_key : demo_users_dataset name : Demo Users Dataset description : Data collected about users for our analytics system. dataset_type : MySQL location : US East fields : - name : first_name description : User's first name path : demo_users_dataset.first_name data_categories : - user.provided.identifiable.name - name : email description : User's Email path : demo_users_dataset.email data_categories : - user.provided.identifiable.contact.email - name : state description : User's State path : demo_users_dataset.state data_categories : - user.provided.identifiable.contact.state - name : food_preference description : User's favorite food path : demo_users_dataset.food_preference data_categories : - user.provided.nonidentifiable - name : created_at description : User's creation timestamp path : demo_users_dataset.created_at data_categories : - system.operations - name : uuid description : User's unique ID path : demo_users_dataset.uuid data_categories : - user.derived.identifiable.unique_id Name Type Description organization_fides_key Int Id of the organization this system belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this dataset description String A description of what this dataset exists for dataset_type String The type of dataset being declared location String The physical location of the dataset dataset_fields List[DatasetField] A list of fields (see DatasetField below) Dataset Fields A Dataset Field describes a single column or array of data within a dataset. Data descriptions for dataset fields do not contain data use or data subject values as those refer specifically to data usage. Name Type Description name String A name for this field description String A description of what this field contains data_categories List[FidesKey] The data categories that apply to this field data_qualifier FidesKey The data qualifier for this data Policies Policies group together sets of privacy rules into a single resource. These are the resources that systems and registries will be evaluated against. Example Manifest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 policy : - organization_fides_key : 1 fides_key : demo_privacy_policy name : Demo Privacy Policy description : The main privacy policy for the organization. rules : - organization_fides_key : 1 fides_key : reject_direct_marketing name : Reject Direct Marketing description : Disallow collecting any user contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - advertising data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT Name Type Description organization_fides_key Int Id of the organization this system belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' privacyRules List[PrivacyRule] see Privacy Rule below Privacy Rule A Privacy Rule describes a single combination of data privacy classifiers that are acceptable or not. Name Type Description fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' data_categories List[DataRule] A list of data rules (see Data Rule below) data_uses List[DataRule] A list of data rules (see Data Rule below) data_subjects List[DataRule] A list of data rules (see Data Rule below) data_qualifier String A data qualifier for this privacy rule action Choice A string, either ACCEPT or REJECT Data Rule A Data Rule states what inclusion operator to use as well as a list of values to match on. Name Type Description inclusion Enum A string, either ALL , NONE or ANY values List[FidesKey] A list of specific data privacy classifier fides_keys Policy Rule Application Fides uses a matching algorithm to determine whether or not each Privacy Declaration is acceptable or not. The following are some examples of how it works. Matching Rule 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Example Privacy Rule: - fides_key : reject_direct_marketing name : Reject Direct Marketing description : Disallow collecting any user contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - advertising data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT # Example Privacy Declaration: - name : Collect data for marketing data_categories : - user.provided.identifiable.contact - user.derived.identifiable.device.cookie_id data_use : advertising data_subjects : - customer data_qualifier : identified_data # Example Evaluation Logic: - Do ANY of the data_categories match? - Yes - Do ANY of the data_uses match? - Yes - Do ANY of the data_subjects match? - Yes - Is the dataQualifier at the same level of exposure or higher? - Yes - Was the answer yes to all of the above questions? - Yes There is a match, and the Privacy Declaration evaluates to REJECT! Non-Matching Rule 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Example Privacy Rule: - fides_key : reject_direct_marketing name : Reject Direct Marketing description : Disallow collecting any user contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - advertising data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT # Example Privacy Declaration: - name : Collect data for marketing data_categories : - user.derived.identifiable.device.cookie_id data_use : advertising data_subjects : - customer data_qualifier : identified_data # Example Evaluation Logic: - Do ANY of the data_categories match? - No - Do ANY of the data_uses match? - Yes - Do ANY of the data_subjects match? - Yes - Is the data_qualifier at the same level of exposure or higher? - Yes - Was the answer yes to all of the above questions? - No There is no match! When evaluating against a policy, Fides evaluates all privacy rules and takes the most restrictive position.","title":"Fides Resources"},{"location":"fides_resources/#fides-resource-types","text":"This page describes the various resources that make up the Fides platform.","title":"Fides Resource Types"},{"location":"fides_resources/#resource-relationship-diagram","text":"","title":"Resource Relationship Diagram"},{"location":"fides_resources/#organization","text":"An organization is a logical grouping of resources, and all resources must belong to an organization. Fides includes a default organization with an id of 1. Example Manifest 1 2 3 4 organization : fides_key : test_organization name : Test Organization description : A test organization used to check the validity of changes. Name Type Description fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this organization description String A description of what this organiztion encapsulates","title":"Organization"},{"location":"fides_resources/#privacy-classifiers","text":"Fides uses four classifiers for describing how systems use privacy data, and for describing what privacy data can be used in what ways. All of these types support organization into hierarchical trees.","title":"Privacy Classifiers"},{"location":"fides_resources/#data-category","text":"A Data Category describes the real-world attribute that the data describes: date of birth, tax ID, home address, and so on. Example Manifest 1 2 3 4 5 data_category : - fides_key : user.provided.identifiable.date_of_birth name : Date of Birth parent_key : user.provided.identifiable description : User's date of birth. Example Hierarchy 1 2 3 4 5 6 7 8 9 10 11 12 13 - user - user.provided - user.provided.identifiable - user.provided.identifiable.date_of_birth - user.provided.identifiable.job_title user.provided.nonidentifiable - user.derived - user.derived.identifiable - user.derived.nonidentifiable - account - account.contact - account.payment - system Name Type Description organization_fides_key Optional[Int] Id of the organization this data category belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data category parent_key Optional[FidesKey] the fides_key of the parent category description String A description of what this data category means or encapsulates","title":"Data Category"},{"location":"fides_resources/#data-use","text":"A Data Use describes what the data is being used for. Example Manifest 1 2 3 4 data_use : - fides_key : provide.system.operations.support name : Operations Support parent_key : provide.system.operations Example Hierarchy 1 2 3 4 5 6 7 8 9 10 - provide - provide.system - provide.system.operations - provide.system.operations.support - provide.system.upgrades - third_party_sharing - third_party_sharing.payment_processing - third_party_sharing.personalized_advertising - third_party_sharing.fraud_detection - third_party_sharing.legal_obligation Name Type Description organization_fides_key Optional[Int] Id of the organization this data use belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data use parent_key Optional[FidesKey] the fides_key of the parent category description String A description of what this data use means or encapsulates","title":"Data Use"},{"location":"fides_resources/#data-subject","text":"A Data Subject describes who the data belongs to. Example Manifest 1 2 3 4 data_subject : - fides_key : anonymous_user name : Anonymous User description : A user without any identifiable information tied to them. Example Hierarchy 1 2 3 - customer - supplier - employee Name Type Description organization_fides_key Optional[Int] Id of the organization this data subject belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data subject description String A description of what this data subject means or encapsulates","title":"Data Subject"},{"location":"fides_resources/#data-qualifier","text":"A Data Qualifier describes how private the data being used is. The hierarchy for Data Qualifiers is in order of increasing exposure. Example Manifest 1 2 3 4 data_qualifier : - fides_key : aggregated_data name : Aggregated Data description : Aggregated data is statistical data that does not contain individual-level entries and is combined from information about enough different persons that individual-level attribtures are not identifiable. Example Hierarchy 1 2 3 4 5 - aggregated data - anonymized data - unlinked pseudonymized data - pseudonymized data - identified data Name Type Description organization_fides_key Optional[Int] Id of the organization this data qualifier belongs to, defaults to 1 fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this data qualifier description String A description of what this data qualifier means or encapsulates","title":"Data Qualifier"},{"location":"fides_resources/#registry","text":"A registry can optionally be used to group systems. Example Manifest 1 2 3 4 5 registry : - organization_fides_key : 1 fides_key : user_systems_registry name : User Systems Registry description : A registry for all of the user-related systems. Name Type Description organization_fides_key Int Id of the organization this registry belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this registry description String A description of what this registry means or encapsulates","title":"Registry"},{"location":"fides_resources/#system","text":"A system represents the privacy usage of a single software project, service, codebase, or application. Example Manifest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 system : - organization_fides_key : 1 fides_key : demo_analytics_system name : Demo Analytics System description : A system used for analyzing customer behaviour. system_type : Service privacy_declarations : - name : Analyze customer behaviour for improvements. data_categories : - user.provided.identifiable.contact - user.derived.identifiable.device.cookie_id data_use : improve.system data_subjects : - customer data_qualifier : identified_data dataset_references : - demo_users_dataset system_dependencies : [] Name Type Description organization_fides_key Int Id of the organization this system belongs to registry_id Optional[Int] Id of the registry this system belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' system_type String The type of system being declared meta Dict[String, String] A key-value pair field to add various additional info privacy_declarations List[PrivacyDeclaration] A list of privacy declarations (see Privacy Declaration below) system_dependencies List[FidesKey] Systems that this system depends on, identified by their fides_key","title":"System"},{"location":"fides_resources/#privacy-declaration","text":"A Privacy Declaration describes the usage of data within a system. It is included as a composite resource within a system declaration. Name Type Description data_categories List[FidesKey] The DataCategories for this PrivacyDeclaration data_subjects List[FidesKey] The DataSubjects for this PrivacyDeclaration data_use List[FidesKey] The DataUse of this PrivacyDeclaration data_qualifier List[FidesKey] The DataQualifier for this PrivacyDeclaration dataset_refereneces List[FidesKey] The fides_key(s) of the DatasetFields that this PrivacyDeclaration leverages. A Privacy Declaration can be read as \"This system uses data in categories data_categories for data_subjects with the purpose of data_use at a qualified privacy level of data_qualifier \"","title":"Privacy Declaration"},{"location":"fides_resources/#dataset","text":"A Dataset represents any kind of place where data is stored and includes a sub-resource that describes the fields within that dataset. Example Manifest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 dataset : - organization_fides_key : 1 fides_key : demo_users_dataset name : Demo Users Dataset description : Data collected about users for our analytics system. dataset_type : MySQL location : US East fields : - name : first_name description : User's first name path : demo_users_dataset.first_name data_categories : - user.provided.identifiable.name - name : email description : User's Email path : demo_users_dataset.email data_categories : - user.provided.identifiable.contact.email - name : state description : User's State path : demo_users_dataset.state data_categories : - user.provided.identifiable.contact.state - name : food_preference description : User's favorite food path : demo_users_dataset.food_preference data_categories : - user.provided.nonidentifiable - name : created_at description : User's creation timestamp path : demo_users_dataset.created_at data_categories : - system.operations - name : uuid description : User's unique ID path : demo_users_dataset.uuid data_categories : - user.derived.identifiable.unique_id Name Type Description organization_fides_key Int Id of the organization this system belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' name String A name for this dataset description String A description of what this dataset exists for dataset_type String The type of dataset being declared location String The physical location of the dataset dataset_fields List[DatasetField] A list of fields (see DatasetField below)","title":"Dataset"},{"location":"fides_resources/#dataset-fields","text":"A Dataset Field describes a single column or array of data within a dataset. Data descriptions for dataset fields do not contain data use or data subject values as those refer specifically to data usage. Name Type Description name String A name for this field description String A description of what this field contains data_categories List[FidesKey] The data categories that apply to this field data_qualifier FidesKey The data qualifier for this data","title":"Dataset Fields"},{"location":"fides_resources/#policies","text":"Policies group together sets of privacy rules into a single resource. These are the resources that systems and registries will be evaluated against. Example Manifest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 policy : - organization_fides_key : 1 fides_key : demo_privacy_policy name : Demo Privacy Policy description : The main privacy policy for the organization. rules : - organization_fides_key : 1 fides_key : reject_direct_marketing name : Reject Direct Marketing description : Disallow collecting any user contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - advertising data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT Name Type Description organization_fides_key Int Id of the organization this system belongs to fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' privacyRules List[PrivacyRule] see Privacy Rule below","title":"Policies"},{"location":"fides_resources/#privacy-rule","text":"A Privacy Rule describes a single combination of data privacy classifiers that are acceptable or not. Name Type Description fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' data_categories List[DataRule] A list of data rules (see Data Rule below) data_uses List[DataRule] A list of data rules (see Data Rule below) data_subjects List[DataRule] A list of data rules (see Data Rule below) data_qualifier String A data qualifier for this privacy rule action Choice A string, either ACCEPT or REJECT","title":"Privacy Rule"},{"location":"fides_resources/#data-rule","text":"A Data Rule states what inclusion operator to use as well as a list of values to match on. Name Type Description inclusion Enum A string, either ALL , NONE or ANY values List[FidesKey] A list of specific data privacy classifier fides_keys","title":"Data Rule"},{"location":"fides_resources/#policy-rule-application","text":"Fides uses a matching algorithm to determine whether or not each Privacy Declaration is acceptable or not. The following are some examples of how it works. Matching Rule 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Example Privacy Rule: - fides_key : reject_direct_marketing name : Reject Direct Marketing description : Disallow collecting any user contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - advertising data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT # Example Privacy Declaration: - name : Collect data for marketing data_categories : - user.provided.identifiable.contact - user.derived.identifiable.device.cookie_id data_use : advertising data_subjects : - customer data_qualifier : identified_data # Example Evaluation Logic: - Do ANY of the data_categories match? - Yes - Do ANY of the data_uses match? - Yes - Do ANY of the data_subjects match? - Yes - Is the dataQualifier at the same level of exposure or higher? - Yes - Was the answer yes to all of the above questions? - Yes There is a match, and the Privacy Declaration evaluates to REJECT! Non-Matching Rule 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Example Privacy Rule: - fides_key : reject_direct_marketing name : Reject Direct Marketing description : Disallow collecting any user contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - advertising data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT # Example Privacy Declaration: - name : Collect data for marketing data_categories : - user.derived.identifiable.device.cookie_id data_use : advertising data_subjects : - customer data_qualifier : identified_data # Example Evaluation Logic: - Do ANY of the data_categories match? - No - Do ANY of the data_uses match? - Yes - Do ANY of the data_subjects match? - Yes - Is the data_qualifier at the same level of exposure or higher? - Yes - Was the answer yes to all of the above questions? - No There is no match! When evaluating against a policy, Fides evaluates all privacy rules and takes the most restrictive position.","title":"Policy Rule Application"},{"location":"license/","text":"Licenseersion 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021- Ethyca, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#license","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021- Ethyca, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"community/code_of_conduct/","text":"Fides Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct that could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting Thomas at thomas@ethyca.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"community/code_of_conduct/#fides-code-of-conduct","text":"","title":"Fides Code of Conduct"},{"location":"community/code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"community/code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct that could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"community/code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"community/code_of_conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"community/code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting Thomas at thomas@ethyca.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"community/code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"community/github/","text":"Community The Fides project welcomes issues, contributions and discussion from all users, regardless of background or experience level. In order to create a positive and welcoming environment, all interactions are governed by the Fides Code of Conduct . GitHub We have a public GitHub Repo for development and collaboration. GitHub Guidelines Whether it's giving us feedback, raising a question, or showing your Fides-related work, we are looking forward to hearing from you. The Fides community is vibrant because of the quality of its members and the discussions they bring. To keep the workspace inviting and helpful for everyone, there are a few guidelines that we ask all members to follow. Rule 1: Assume Positive Intent Being nice is the most important pillar of the Fides community. We are considerate to each other's effort and time. It's also easy to misinterpret people through Slack, so we make an extra effort to chat in a positive tone. We assume that you are here to learn and exchange ideas, and we ask that you contribute to making a welcoming community. If someone is helping you, be mindful of the effort they are putting in. While we are always happy to help users, we can not help users with step-by-step debugging. Use your professional judgment in discerning whether requests are unreasonable. The Fides team always tries to listen to the community. Please be understanding if your issue or feature request is not deemed an immediate priority. Rule 2: Use threads for larger messages Because of the size of our community and frequency of posts, it's easy for large messages to drown out smaller messages. Using threads helps people see more messages on their screen. Larger code blocks should be posted in threads. Rule 3: Avoid posting sensitive information Community members sometimes need to post code snippets as they ask for help. Be sure to remove sensitive information from posts to the public channels. If your Fides account information is needed to help you, we will ask you to direct message such information. Be cautious of anyone asking for information through direct messages. Rule 4: Write high quality questions The Fides community is here to support you. That said, it is significantly easier to answer well-researched and clearly-written questions. Even adding potentially relevant links to a post helps tremendously. Informative Slack threads are archived by our resident bot Marvin. Having well-written threads helps future users encountering the same problem. Oftentimes your question may have been answered somewhere else; some good resources to start looking before asking a question: Fides Documentation GitHub Issues StackOverflow Rule 5: Don't abuse tagging users Requests for help will be seen by the Fides team, and will be directed to the appropriate person. Tagging individual users is highly discouraged unless it is in the context of a conversation thread. Rule 6: Avoid using DMs to ask for help Fides employees should not be sent questions in DMs unless we specifically ask you to send us private information. There are times when it makes sense to directly message another community member experiencing a similar issue, or working with similar technologies. Just be aware that some people may not want to be messaged. It also helps other people if you post your question publicly. Similar to above, informative Slack threads are archived. Having conversations in public channels drives better quality discussions that can be referenced in the future. Rule 7: Don't advertise material unrelated to Fides Our community is in the channel to learn more about Fides. Showing us Fides-related stuff that you're working on is highly encouraged. Advertising products and events unrelated to Fides will be removed.","title":"GitHub"},{"location":"community/github/#community","text":"The Fides project welcomes issues, contributions and discussion from all users, regardless of background or experience level. In order to create a positive and welcoming environment, all interactions are governed by the Fides Code of Conduct .","title":"Community"},{"location":"community/github/#github","text":"We have a public GitHub Repo for development and collaboration.","title":"GitHub"},{"location":"community/github/#github-guidelines","text":"Whether it's giving us feedback, raising a question, or showing your Fides-related work, we are looking forward to hearing from you. The Fides community is vibrant because of the quality of its members and the discussions they bring. To keep the workspace inviting and helpful for everyone, there are a few guidelines that we ask all members to follow.","title":"GitHub Guidelines"},{"location":"community/github/#rule-1-assume-positive-intent","text":"Being nice is the most important pillar of the Fides community. We are considerate to each other's effort and time. It's also easy to misinterpret people through Slack, so we make an extra effort to chat in a positive tone. We assume that you are here to learn and exchange ideas, and we ask that you contribute to making a welcoming community. If someone is helping you, be mindful of the effort they are putting in. While we are always happy to help users, we can not help users with step-by-step debugging. Use your professional judgment in discerning whether requests are unreasonable. The Fides team always tries to listen to the community. Please be understanding if your issue or feature request is not deemed an immediate priority.","title":"Rule 1: Assume Positive Intent"},{"location":"community/github/#rule-2-use-threads-for-larger-messages","text":"Because of the size of our community and frequency of posts, it's easy for large messages to drown out smaller messages. Using threads helps people see more messages on their screen. Larger code blocks should be posted in threads.","title":"Rule 2: Use threads for larger messages"},{"location":"community/github/#rule-3-avoid-posting-sensitive-information","text":"Community members sometimes need to post code snippets as they ask for help. Be sure to remove sensitive information from posts to the public channels. If your Fides account information is needed to help you, we will ask you to direct message such information. Be cautious of anyone asking for information through direct messages.","title":"Rule 3: Avoid posting sensitive information"},{"location":"community/github/#rule-4-write-high-quality-questions","text":"The Fides community is here to support you. That said, it is significantly easier to answer well-researched and clearly-written questions. Even adding potentially relevant links to a post helps tremendously. Informative Slack threads are archived by our resident bot Marvin. Having well-written threads helps future users encountering the same problem. Oftentimes your question may have been answered somewhere else; some good resources to start looking before asking a question: Fides Documentation GitHub Issues StackOverflow","title":"Rule 4: Write high quality questions"},{"location":"community/github/#rule-5-dont-abuse-tagging-users","text":"Requests for help will be seen by the Fides team, and will be directed to the appropriate person. Tagging individual users is highly discouraged unless it is in the context of a conversation thread.","title":"Rule 5: Don't abuse tagging users"},{"location":"community/github/#rule-6-avoid-using-dms-to-ask-for-help","text":"Fides employees should not be sent questions in DMs unless we specifically ask you to send us private information. There are times when it makes sense to directly message another community member experiencing a similar issue, or working with similar technologies. Just be aware that some people may not want to be messaged. It also helps other people if you post your question publicly. Similar to above, informative Slack threads are archived. Having conversations in public channels drives better quality discussions that can be referenced in the future.","title":"Rule 6: Avoid using DMs to ask for help"},{"location":"community/github/#rule-7-dont-advertise-material-unrelated-to-fides","text":"Our community is in the channel to learn more about Fides. Showing us Fides-related stuff that you're working on is highly encouraged. Advertising products and events unrelated to Fides will be removed.","title":"Rule 7: Don't advertise material unrelated to Fides"},{"location":"development/code_style/","text":"Code Style Black formatting Fides's code is formatted using the black style. This style is checked in a CI step, and merges to master are prevented if code does not conform. To apply black to your code, run black from the root Fidesctl directory: 1 2 cd fidesctl black . A number of extensions are available for popular editors that will automatically apply black to your code. Pylint Fides's code is linted using pylint . Linter checks run as part of a CI step and merges to master are prevented if code does not conform. To apply pylint to your code, run pylint from the root Fidesctl directory: 1 2 cd fidesctl pylint src Mypy typing Fides's code is statically-typed using mypy . Type checking is validated as a CI step, and merges to master are prevented if code does not pass type checks. As a general rule, mypy typing requires all function arguments and return values to be annotated. 1 2 cd fidesctl mypy src","title":"Code Style"},{"location":"development/code_style/#code-style","text":"","title":"Code Style"},{"location":"development/code_style/#black-formatting","text":"Fides's code is formatted using the black style. This style is checked in a CI step, and merges to master are prevented if code does not conform. To apply black to your code, run black from the root Fidesctl directory: 1 2 cd fidesctl black . A number of extensions are available for popular editors that will automatically apply black to your code.","title":"Black formatting"},{"location":"development/code_style/#pylint","text":"Fides's code is linted using pylint . Linter checks run as part of a CI step and merges to master are prevented if code does not conform. To apply pylint to your code, run pylint from the root Fidesctl directory: 1 2 cd fidesctl pylint src","title":"Pylint"},{"location":"development/code_style/#mypy-typing","text":"Fides's code is statically-typed using mypy . Type checking is validated as a CI step, and merges to master are prevented if code does not pass type checks. As a general rule, mypy typing requires all function arguments and return values to be annotated. 1 2 cd fidesctl mypy src","title":"Mypy typing"},{"location":"development/documentation/","text":"Documentation Documentation is incredibly important to Fides, both for explaining its concepts to general audiences and describing its usage to developers. Concepts Fides includes a great deal of \"concept\" documentation, which covers features, tutorials, guides, and examples separately from the auto-generated API reference. This page is part of the concept documentation for development! To write concept docs, add Markdown files to the docs/fides/docs/ directory (or one of its subdirectories). To ensure that your page is displayed in the navigation, edit mkdocs.yml to include a reference to it. Semantics Capitalization Concepts that refer to proper nouns or are trademarked should always be capitalized, including \"Fides\" and \"FidesAPI\". Other Fides terms, like \"Data Category\" or \"System\", should also be capitalized to be clear about the fact that a Fides resource is being referenced. When a System is applied, it is either created or updated through the FidesAPI. The System model requires a field called fides_key . Previewing docs locally Documentation (including both concepts and API references) is built and deployed with every merge to Fides's master branch. If you're using VS Code Dev Containers, the docs will automatically be available at localhost:8000 , otherwise you'll need to run the following command: 1 make docs-serve You'll see a status update as the docs build, and then an announcement that they are available on http://127.0.0.1:8000 .","title":"Documentation"},{"location":"development/documentation/#documentation","text":"Documentation is incredibly important to Fides, both for explaining its concepts to general audiences and describing its usage to developers.","title":"Documentation"},{"location":"development/documentation/#concepts","text":"Fides includes a great deal of \"concept\" documentation, which covers features, tutorials, guides, and examples separately from the auto-generated API reference. This page is part of the concept documentation for development! To write concept docs, add Markdown files to the docs/fides/docs/ directory (or one of its subdirectories). To ensure that your page is displayed in the navigation, edit mkdocs.yml to include a reference to it.","title":"Concepts"},{"location":"development/documentation/#semantics","text":"","title":"Semantics"},{"location":"development/documentation/#capitalization","text":"Concepts that refer to proper nouns or are trademarked should always be capitalized, including \"Fides\" and \"FidesAPI\". Other Fides terms, like \"Data Category\" or \"System\", should also be capitalized to be clear about the fact that a Fides resource is being referenced. When a System is applied, it is either created or updated through the FidesAPI. The System model requires a field called fides_key .","title":"Capitalization"},{"location":"development/documentation/#previewing-docs-locally","text":"Documentation (including both concepts and API references) is built and deployed with every merge to Fides's master branch. If you're using VS Code Dev Containers, the docs will automatically be available at localhost:8000 , otherwise you'll need to run the following command: 1 make docs-serve You'll see a status update as the docs build, and then an announcement that they are available on http://127.0.0.1:8000 .","title":"Previewing docs locally"},{"location":"development/overview/","text":"Development Overview Thanks for contributing to Fidesctl! This section of the docs is designed to help you become familiar with how we work, the standards we apply, and how to ensure your contribution is successful. If you're stuck, don't be shy about asking for help on GitHub . Getting Started The first step is to clone the Fidesctl repo for development: 1 git clone https://github.com/ethyca/fides Once that's complete, there are a few different ways to spin up the project and get coding! Developer Workflows There are a few different ways to develop Fidesctl, they are listed below in order of how strongly they are recommended! If you're using VS Code, the recommended way to work on Fidesctl is by leveraging the Dev Containers feature. The repo has a .devcontainer/devcontainer.json file already included that will set up a complete environment in VS Code, including the suggested VS Code extensions and settings. Follow these steps to get started: Install the Remote-Containers extension for VS Code. Open the command window (the F1 key will open it, by default) and select the Remote-Containers: Open Folder in Container... command. Click \"Open\", without having selected any specific folder. The containers will now spin up and VS Code will be running inside of the containers. The bottom left of the IDE will now say Dev Container: Fidesctl . When you open a new VS Code shell, it will be inside of the fidesctl container, and you'll have access to all of the fidesctl commands as well as any Python commands like pytest , black , mypy , etc. If you're using an editor besides VS Code, then the next best way to work on Fidesctl is by utilizing the Makefile commands: See the guide here for more information on getting set up via the Makefile Once you've gotten everything set up, run make cli to spin up a shell within the fidesctl container. You can and should run all of your various development commands from within this shell, such as pytest , black , etc. Finally, the least-recommended method would be to install the project in your local environment and develop directly. Write your code We have no doubt you can write amazing code! However, we want to help you ensure your code plays nicely with the rest of the Fidesctl ecosystem. Many projects describe code style and documentation as a suggestion; in Fidesctl it's a CI-checked requirement. To learn how to style your code, see the style guide . To learn how to document your code, see the docs guide . To learn how to test your code, see the tests guide . To learn what format your PR should follow, make sure to follow the pull request guidelines . Submit your code In order to submit code to Fidesctl, please: Fork the Fidesctl repository Create a new branch on your fork Open a Pull Request once your work is ready for review Once automated tests have passed, a maintainer will review your PR and provide feedback on any changes it requires to be approved. Once approved, your PR will be merged into Fidesctl. Congratulations You're a Fidesctl contributor - welcome to the team! \ud83c\udf89","title":"Overview"},{"location":"development/overview/#development-overview","text":"Thanks for contributing to Fidesctl! This section of the docs is designed to help you become familiar with how we work, the standards we apply, and how to ensure your contribution is successful. If you're stuck, don't be shy about asking for help on GitHub .","title":"Development Overview"},{"location":"development/overview/#getting-started","text":"The first step is to clone the Fidesctl repo for development: 1 git clone https://github.com/ethyca/fides Once that's complete, there are a few different ways to spin up the project and get coding!","title":"Getting Started"},{"location":"development/overview/#developer-workflows","text":"There are a few different ways to develop Fidesctl, they are listed below in order of how strongly they are recommended! If you're using VS Code, the recommended way to work on Fidesctl is by leveraging the Dev Containers feature. The repo has a .devcontainer/devcontainer.json file already included that will set up a complete environment in VS Code, including the suggested VS Code extensions and settings. Follow these steps to get started: Install the Remote-Containers extension for VS Code. Open the command window (the F1 key will open it, by default) and select the Remote-Containers: Open Folder in Container... command. Click \"Open\", without having selected any specific folder. The containers will now spin up and VS Code will be running inside of the containers. The bottom left of the IDE will now say Dev Container: Fidesctl . When you open a new VS Code shell, it will be inside of the fidesctl container, and you'll have access to all of the fidesctl commands as well as any Python commands like pytest , black , mypy , etc. If you're using an editor besides VS Code, then the next best way to work on Fidesctl is by utilizing the Makefile commands: See the guide here for more information on getting set up via the Makefile Once you've gotten everything set up, run make cli to spin up a shell within the fidesctl container. You can and should run all of your various development commands from within this shell, such as pytest , black , etc. Finally, the least-recommended method would be to install the project in your local environment and develop directly.","title":"Developer Workflows"},{"location":"development/overview/#write-your-code","text":"We have no doubt you can write amazing code! However, we want to help you ensure your code plays nicely with the rest of the Fidesctl ecosystem. Many projects describe code style and documentation as a suggestion; in Fidesctl it's a CI-checked requirement. To learn how to style your code, see the style guide . To learn how to document your code, see the docs guide . To learn how to test your code, see the tests guide . To learn what format your PR should follow, make sure to follow the pull request guidelines .","title":"Write your code"},{"location":"development/overview/#submit-your-code","text":"In order to submit code to Fidesctl, please: Fork the Fidesctl repository Create a new branch on your fork Open a Pull Request once your work is ready for review Once automated tests have passed, a maintainer will review your PR and provide feedback on any changes it requires to be approved. Once approved, your PR will be merged into Fidesctl.","title":"Submit your code"},{"location":"development/overview/#congratulations","text":"You're a Fidesctl contributor - welcome to the team! \ud83c\udf89","title":"Congratulations"},{"location":"development/pull_requests/","text":"Pull Requests Pull Requests are the primary unit of work within the Fides project. All code changes are expected to be submitted via a PR, and as such here are a few requirements for submitting PRs: Completely fill out the provided pull request template If you're unsure about a potential feature implementation or there is anything else that needs discussing, feel free to ask for an early review/feedback in the comments of the PR. Make sure that all checks are passing and all boxes have been checked before passing it off to a reviewer for a final approval. PR reviews require other people to spend their time, so please be courteous and double check your work before passing it to a reviewer. If there is a bug in a PR, fix it within that PR, do not create another PR to fix a bug in a separate PR.","title":"Pull Requests"},{"location":"development/pull_requests/#pull-requests","text":"Pull Requests are the primary unit of work within the Fides project. All code changes are expected to be submitted via a PR, and as such here are a few requirements for submitting PRs: Completely fill out the provided pull request template If you're unsure about a potential feature implementation or there is anything else that needs discussing, feel free to ask for an early review/feedback in the comments of the PR. Make sure that all checks are passing and all boxes have been checked before passing it off to a reviewer for a final approval. PR reviews require other people to spend their time, so please be courteous and double check your work before passing it to a reviewer. If there is a bug in a PR, fix it within that PR, do not create another PR to fix a bug in a separate PR.","title":"Pull Requests"},{"location":"development/releases/","text":"Releases Fides uses semantic versioning. Each release version has a corresponding GitHub Project assigned to it. Issues are then assigned to them as a way to determine what new features/bug fixes will be included in each release. When a release project is complete, a new version is cut using GitHub's release page here . This will trigger a GitHub Action that pushes the new version to PyPi. Hotfixes are an exception to this and can be added and pushed mid-release as needed.","title":"Releases"},{"location":"development/releases/#releases","text":"Fides uses semantic versioning. Each release version has a corresponding GitHub Project assigned to it. Issues are then assigned to them as a way to determine what new features/bug fixes will be included in each release. When a release project is complete, a new version is cut using GitHub's release page here . This will trigger a GitHub Action that pushes the new version to PyPi. Hotfixes are an exception to this and can be added and pushed mid-release as needed.","title":"Releases"},{"location":"development/testing/","text":"Testing Fidesctl loves tests! There are a few important reasons to write tests: Make sure your code works Tests ensure that your code does the thing you intend it to do. If you have a function that adds two numbers, you'll want to test that it does, in fact, return their sum. If behavior depends on a configuration setting, ensure that changing that setting changes the behavior. In short, if you wrote a line of code, you should test that line works as expected. Make sure your code doesn't not work It may seem silly, but another important reason to write tests is to ensure that your code behaves as expected even when it's broken . This is especially important for a project like Fidesctl, which is focused on helping engineers when something unexpected happens to their code. For example, you could write tests about what you expect to happen if your function is called with incorrect (or no) arguments, or to ensure that any errors are properly trapped and handled. Tests are documentation Ultimately, your tests are the best documentation for your code. Another developer should be able to look at your tests and understand what your code does, how to invoke it, and what edge cases it contains. Therefore, try to write short, self-explanatory tests with descriptive titles. Help future developers As Fidesctl grows, your code will be reused in more and more places, by developers who may not be familiar with the details of your implementation. Therefore, your tests are an opportunity to ensure that your code is used correctly in the future. For example, if your code needs to be used in a certain way, or expects a certain configuration, or is always expected to return a certain output, or has any other details that might impact its ability to be used in the framework, write a test for it! At minimum, you'll help a future developer understand that you consciously chose to design your code a certain way. Writing tests Fidesctl's tests are stored in the tests directory. Tests should have descriptive names that make it clear what you're testing. If necessary, add a docstring or comment to explain why you're testing this specific thing. 1 2 3 4 5 6 7 # Good test name def test_dry_evaluate_system_fail ( server_url , resources_dict ): ... # Bad test name def test_dry_evaluate (): ... Fidesctl has a few pytest fixtures available for testing; see conftest.py for details. Integration tests vs. Mocked tests Generally, tests that include mocking are discouraged. Mocking can create a false sense of security and obfuscate possible errors in the code that only present themselves when integration tested. Running tests Fidesctl uses pytest for unit testing. To run tests, invoke pytest from the /fides/fidesctl/ directory: 1 2 cd fidesctl pytest Running specific tests To run a subset of tests, provide a filename or directory; to match a specific test name, use the -k flag: 1 2 # run all tests in the tests/integration directory that contain the word \"api\" in their title pytest tests/integration/ -k api The --sw flag will exit pytest the first time it encounters an error; subsequent runs with the same flag will skip any tests that succeeded and run the failed test first. For more information on available Pytest invocation options, see the documentation here . CI Workflows CI will run automatically against any PR you open. Please run your tests locally first to avoid \"debugging in CI\", as this takes up resources that could be used by other contributors and is generally an inefficient usage of your time!","title":"Testing"},{"location":"development/testing/#testing","text":"Fidesctl loves tests! There are a few important reasons to write tests: Make sure your code works Tests ensure that your code does the thing you intend it to do. If you have a function that adds two numbers, you'll want to test that it does, in fact, return their sum. If behavior depends on a configuration setting, ensure that changing that setting changes the behavior. In short, if you wrote a line of code, you should test that line works as expected. Make sure your code doesn't not work It may seem silly, but another important reason to write tests is to ensure that your code behaves as expected even when it's broken . This is especially important for a project like Fidesctl, which is focused on helping engineers when something unexpected happens to their code. For example, you could write tests about what you expect to happen if your function is called with incorrect (or no) arguments, or to ensure that any errors are properly trapped and handled. Tests are documentation Ultimately, your tests are the best documentation for your code. Another developer should be able to look at your tests and understand what your code does, how to invoke it, and what edge cases it contains. Therefore, try to write short, self-explanatory tests with descriptive titles. Help future developers As Fidesctl grows, your code will be reused in more and more places, by developers who may not be familiar with the details of your implementation. Therefore, your tests are an opportunity to ensure that your code is used correctly in the future. For example, if your code needs to be used in a certain way, or expects a certain configuration, or is always expected to return a certain output, or has any other details that might impact its ability to be used in the framework, write a test for it! At minimum, you'll help a future developer understand that you consciously chose to design your code a certain way.","title":"Testing"},{"location":"development/testing/#writing-tests","text":"Fidesctl's tests are stored in the tests directory. Tests should have descriptive names that make it clear what you're testing. If necessary, add a docstring or comment to explain why you're testing this specific thing. 1 2 3 4 5 6 7 # Good test name def test_dry_evaluate_system_fail ( server_url , resources_dict ): ... # Bad test name def test_dry_evaluate (): ... Fidesctl has a few pytest fixtures available for testing; see conftest.py for details.","title":"Writing tests"},{"location":"development/testing/#integration-tests-vs-mocked-tests","text":"Generally, tests that include mocking are discouraged. Mocking can create a false sense of security and obfuscate possible errors in the code that only present themselves when integration tested.","title":"Integration tests vs. Mocked tests"},{"location":"development/testing/#running-tests","text":"Fidesctl uses pytest for unit testing. To run tests, invoke pytest from the /fides/fidesctl/ directory: 1 2 cd fidesctl pytest","title":"Running tests"},{"location":"development/testing/#running-specific-tests","text":"To run a subset of tests, provide a filename or directory; to match a specific test name, use the -k flag: 1 2 # run all tests in the tests/integration directory that contain the word \"api\" in their title pytest tests/integration/ -k api The --sw flag will exit pytest the first time it encounters an error; subsequent runs with the same flag will skip any tests that succeeded and run the failed test first. For more information on available Pytest invocation options, see the documentation here .","title":"Running specific tests"},{"location":"development/testing/#ci-workflows","text":"CI will run automatically against any PR you open. Please run your tests locally first to avoid \"debugging in CI\", as this takes up resources that could be used by other contributors and is generally an inefficient usage of your time!","title":"CI Workflows"},{"location":"getting_started/docker/","text":"Getting Started with Fidesctl in Docker The recommended way to get Fidesctl running is to launch it using the supplied make commands. The make commands wrap docker-compose commands that will spin up each piece of the project. System Requirements Install make locally (see Make on Homebrew (Mac) , Make for Windows , or your preferred installation) Install docker locally (see Docker Desktop or your preferred installation; use a recent enough version so that docker-compose is also available) Clone the Fidesctl repo and cd into the fides directory Docker Setup The following commands should all be run from the top-level fides directory (where the Makefile is): make cli -> This will spin up the entire project and open a shell within the fidesctl container, with the fidesapi being accessible. This command will \"hang\" for a bit, as fidesctl will wait for the API to be healthy before launching the shell. Once you see the fidesctl# prompt, you know you're ready to go: 1 2 3 4 5 6 7 8 9 10 ~/git/fides% make cli Build the images required in the docker-compose file... ... Building fidesapi ... Building fidesctl ... Building docs ... root@1a742083cedf:/fides/fidesctl# fidesctl init-db -> Builds the required images, spins up the database, and runs the initialization scripts: 1 2 3 ~/git/fides% fidesctl init-db INFO [ alembic.runtime.migration ] Context impl PostgresqlImpl. INFO [ alembic.runtime.migration ] Will assume transactional DDL. fidesctl ping -> This confirms that your fidesctl CLI can reach the server and everything is ready to go! 1 2 3 root@796cfde906f1:/fides/fidesctl# fidesctl ping Pinging http://fidesapi:8080... Fidesctl is healthy! Next Steps Now that you're up and running, you can use fidesctl from the shell to get a list of all the possible CLI commands. You're now ready to start enforcing privacy with Fidesctl! See the Tutorial page for a step-by-step guide on setting up a Fidesctl data privacy workflow.","title":"Getting Started with Fidesctl in Docker"},{"location":"getting_started/docker/#getting-started-with-fidesctl-in-docker","text":"The recommended way to get Fidesctl running is to launch it using the supplied make commands. The make commands wrap docker-compose commands that will spin up each piece of the project.","title":"Getting Started with Fidesctl in Docker"},{"location":"getting_started/docker/#system-requirements","text":"Install make locally (see Make on Homebrew (Mac) , Make for Windows , or your preferred installation) Install docker locally (see Docker Desktop or your preferred installation; use a recent enough version so that docker-compose is also available) Clone the Fidesctl repo and cd into the fides directory","title":"System Requirements"},{"location":"getting_started/docker/#docker-setup","text":"The following commands should all be run from the top-level fides directory (where the Makefile is): make cli -> This will spin up the entire project and open a shell within the fidesctl container, with the fidesapi being accessible. This command will \"hang\" for a bit, as fidesctl will wait for the API to be healthy before launching the shell. Once you see the fidesctl# prompt, you know you're ready to go: 1 2 3 4 5 6 7 8 9 10 ~/git/fides% make cli Build the images required in the docker-compose file... ... Building fidesapi ... Building fidesctl ... Building docs ... root@1a742083cedf:/fides/fidesctl# fidesctl init-db -> Builds the required images, spins up the database, and runs the initialization scripts: 1 2 3 ~/git/fides% fidesctl init-db INFO [ alembic.runtime.migration ] Context impl PostgresqlImpl. INFO [ alembic.runtime.migration ] Will assume transactional DDL. fidesctl ping -> This confirms that your fidesctl CLI can reach the server and everything is ready to go! 1 2 3 root@796cfde906f1:/fides/fidesctl# fidesctl ping Pinging http://fidesapi:8080... Fidesctl is healthy!","title":"Docker Setup"},{"location":"getting_started/docker/#next-steps","text":"Now that you're up and running, you can use fidesctl from the shell to get a list of all the possible CLI commands. You're now ready to start enforcing privacy with Fidesctl! See the Tutorial page for a step-by-step guide on setting up a Fidesctl data privacy workflow.","title":"Next Steps"},{"location":"getting_started/local/","text":"Getting Started with Fidesctl Locally (without Docker) Fidesctl can be spun up locally without relying on Docker or Make, however it is a bit more complicated. If you'd like something simpler, please see the Getting Started with Fidesctl in Docker guide for the recommended setup experience. The guide for getting Fidesctl up and running locally is the same as is described in our Deployment Guide , so please head over there and follow the steps to get going. Next Steps See the Tutorial page for a step-by-step guide on setting up a Fides data privacy workflow.","title":"Getting Started with Fidesctl Locally (without Docker)"},{"location":"getting_started/local/#getting-started-with-fidesctl-locally-without-docker","text":"Fidesctl can be spun up locally without relying on Docker or Make, however it is a bit more complicated. If you'd like something simpler, please see the Getting Started with Fidesctl in Docker guide for the recommended setup experience. The guide for getting Fidesctl up and running locally is the same as is described in our Deployment Guide , so please head over there and follow the steps to get going.","title":"Getting Started with Fidesctl Locally (without Docker)"},{"location":"getting_started/local/#next-steps","text":"See the Tutorial page for a step-by-step guide on setting up a Fides data privacy workflow.","title":"Next Steps"},{"location":"tutorial/ci/","text":"Integrate your CI In this section, we'll reference a few examples and best practices for setting up your CI. (TODO: rewrite) Fides is meant to be a part of your CI pipeline jobs in order to enforce your organization's privacy policy on data before software is released to the world. We recommend setting up 2 different events to trigger during a CI pipeline run. Repository Structure Within your organization, you'll author manifest files and add these to the version control repositories alongside your source code, tests, etc. Each of these individual projects can then publish their manifests to the Fidesctl server via the API: Pull Request 1. Set up a new CI workflow that gets triggered whenever a system or registry file gets changed within a pull request. 2. Configure the new workflow to run fidesctl evaluate --dry fides_manifests/ when it gets triggered. 3. The command will trigger a non-zero exit if the evaluation fails. Use the result of this job to determine whether or not a system change is safe to merge or not. If the command fails, check the error messages to see why the evaluation failed. Merge Event Set up a new CI workflow that gets triggered whenever something in your manifests directory changes and the branch gets merged to the main branch. Configure the new workflow to run two few jobs: fidesctl apply fides_manifest/ fidesctl evaluate system <fides_key> This will apply all of your manifests to the API and then evaluate the current state of your system on the main branch. Additional Resources We have compiled a few reference implementations for some popular CI tools, which you can find here. (TODO: provide examples)","title":"Integrate your CI"},{"location":"tutorial/ci/#integrate-your-ci","text":"In this section, we'll reference a few examples and best practices for setting up your CI. (TODO: rewrite) Fides is meant to be a part of your CI pipeline jobs in order to enforce your organization's privacy policy on data before software is released to the world. We recommend setting up 2 different events to trigger during a CI pipeline run.","title":"Integrate your CI"},{"location":"tutorial/ci/#repository-structure","text":"Within your organization, you'll author manifest files and add these to the version control repositories alongside your source code, tests, etc. Each of these individual projects can then publish their manifests to the Fidesctl server via the API:","title":"Repository Structure"},{"location":"tutorial/ci/#pull-request","text":"1. Set up a new CI workflow that gets triggered whenever a system or registry file gets changed within a pull request. 2. Configure the new workflow to run fidesctl evaluate --dry fides_manifests/ when it gets triggered. 3. The command will trigger a non-zero exit if the evaluation fails. Use the result of this job to determine whether or not a system change is safe to merge or not. If the command fails, check the error messages to see why the evaluation failed.","title":"Pull Request"},{"location":"tutorial/ci/#merge-event","text":"Set up a new CI workflow that gets triggered whenever something in your manifests directory changes and the branch gets merged to the main branch. Configure the new workflow to run two few jobs: fidesctl apply fides_manifest/ fidesctl evaluate system <fides_key> This will apply all of your manifests to the API and then evaluate the current state of your system on the main branch.","title":"Merge Event"},{"location":"tutorial/ci/#additional-resources","text":"We have compiled a few reference implementations for some popular CI tools, which you can find here. (TODO: provide examples)","title":"Additional Resources"},{"location":"tutorial/dataset/","text":"Annotate your Datasets In this section, we'll review what a dataset resource is, why it's needed, and how it's created and managed. Fundamentally, your data ecosystem is built on data that is stored somewhere . In Fides, Datasets are used for granular, field-level annotations of exactly what data your systems are storing and where. For example, you might declare one dataset for your Postgres application database, a second dataset for your Mongo orders collection, and a third dataset for some CSV files in your storage buckets. The Dataset resource provides a database-agnostic way to annotate the fields stored in these systems with Data Categories, providing a metadata layer for other tooling to consume. For Best Pizza Co, you can see that their 3 Datasets, postgres appdb , firestore auth , and redshift analyticsdb are aligned with data storage services in their data ecosystem: At Best Pizza Co, we'll want to create a Dataset resource for each of the 3 datasets above, starting with the first database, the Postgres Application DB. Generating a Dataset Resource To create a dataset resource, you can either author a resource YAML manually or use the generate-dataset CLI command to connect to your database and automatically generate an (un-annotated)resource YAML based on your database schema: 1 2 root@0419219d14e1:/fides/fidesctl# fidesctl generate-dataset postgresql://USERNAME:PASSWORD@best-pizza-co.us-east-1.rds.amazonaws.com:5432/postgres dataset1.yml Generated dataset manifest written to dataset1.yml Fidesctl has stored the structure of that database as a YAML file in the location provided (\"dataset1.yml\"). This file will serve as the first building block in creating Privacy as Code at the lowest level. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 dataset : - fides_key : appdb organization_fides_key : default_organization name : Postgres App Database description : 'Fides Generated Description for Dataset: Postgres App Database' collections : - name : users description : 'Fides Generated Description for Table: users' fields : - name : first_name description : 'Fides Generated Description for Column: first_name' data_categories : [] - name : zip_code description : 'Fides Generated Description for Column: zip_code' data_categories : [] Understanding the Dataset Resource This YAML serves as the foundation of the Fides language; it answers the questions of \" What data and kinds of data do we have? \" and \" How is it organized? \". The language is built on the declaring what types of data are found in storage for your organization. In traditional SQL, Fides defines the following: * \"datasets\" as database schemas * \"collections\" as database tables * \"fields\" as database columns For NoSQL datasets, Fides defines the following: * \"dataset\" * \"collection\" as a logical grouping of data fields (ie: in MongoDB, this is called a \"Collection\") * \"fields\" as a reference to an individual data element (ie: in MongoDB, this is called a \"field\") Further, fideslang has attributes that describe what kind of data is contained in this dataset. We use the following attributes to describe the data: Name Type Description name String The name of this field description String A description of what this field contains data_categories List[FidesKey] The data categories, or types of sensitive data as defined in the taxonomy, that can be found in this field data_qualifier FidesKey Data qualifier describes the level of deidentification for the dataset Create Dataset Annotations As you can see, fidesctl generate-dataset has already pre-filled the required attributes for this exported YAML file. We can update the YAML file with some information that might be appropriate for your organization, such as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 dataset : - fides_key : appdb organization_fides_key : default_organization name : Postgres App Database description : 'This is our primary web application database' collections : - name : users description : 'Table that contains all user account data as entered by the user' fields : - name : first_name description : 'Fides Generated Description for Column: first_name' data_categories : - user.provided.identifiable.name data_qualifier : aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified - name : zip_code description : 'Fides Generated Description for Column: zip_code' data_categories : - user.provided.identifiable.contact.postal_code data_qualifier : aggregated.anonymized.unlinked_pseudonymized PRO TIP As you're progressing with the tutorial, we recommend installing our Fides' VS Code plugin , which will validate the syntax in real-time as you're writing your resource files! Maintaining a Dataset Resource As your business grows, you will add more databases and other services where you will be storing potentially sensitive data. We recommend that updating this resource file become a part of the development process when building a new feature. Next: Systems Now that we've seen how to annotate dataset resources (e.g. databases, flat-files) we can move up to the next layer, Systems .","title":"Annotate your Datasets"},{"location":"tutorial/dataset/#annotate-your-datasets","text":"In this section, we'll review what a dataset resource is, why it's needed, and how it's created and managed. Fundamentally, your data ecosystem is built on data that is stored somewhere . In Fides, Datasets are used for granular, field-level annotations of exactly what data your systems are storing and where. For example, you might declare one dataset for your Postgres application database, a second dataset for your Mongo orders collection, and a third dataset for some CSV files in your storage buckets. The Dataset resource provides a database-agnostic way to annotate the fields stored in these systems with Data Categories, providing a metadata layer for other tooling to consume. For Best Pizza Co, you can see that their 3 Datasets, postgres appdb , firestore auth , and redshift analyticsdb are aligned with data storage services in their data ecosystem: At Best Pizza Co, we'll want to create a Dataset resource for each of the 3 datasets above, starting with the first database, the Postgres Application DB.","title":"Annotate your Datasets"},{"location":"tutorial/dataset/#generating-a-dataset-resource","text":"To create a dataset resource, you can either author a resource YAML manually or use the generate-dataset CLI command to connect to your database and automatically generate an (un-annotated)resource YAML based on your database schema: 1 2 root@0419219d14e1:/fides/fidesctl# fidesctl generate-dataset postgresql://USERNAME:PASSWORD@best-pizza-co.us-east-1.rds.amazonaws.com:5432/postgres dataset1.yml Generated dataset manifest written to dataset1.yml Fidesctl has stored the structure of that database as a YAML file in the location provided (\"dataset1.yml\"). This file will serve as the first building block in creating Privacy as Code at the lowest level. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 dataset : - fides_key : appdb organization_fides_key : default_organization name : Postgres App Database description : 'Fides Generated Description for Dataset: Postgres App Database' collections : - name : users description : 'Fides Generated Description for Table: users' fields : - name : first_name description : 'Fides Generated Description for Column: first_name' data_categories : [] - name : zip_code description : 'Fides Generated Description for Column: zip_code' data_categories : []","title":"Generating a Dataset Resource"},{"location":"tutorial/dataset/#understanding-the-dataset-resource","text":"This YAML serves as the foundation of the Fides language; it answers the questions of \" What data and kinds of data do we have? \" and \" How is it organized? \". The language is built on the declaring what types of data are found in storage for your organization. In traditional SQL, Fides defines the following: * \"datasets\" as database schemas * \"collections\" as database tables * \"fields\" as database columns For NoSQL datasets, Fides defines the following: * \"dataset\" * \"collection\" as a logical grouping of data fields (ie: in MongoDB, this is called a \"Collection\") * \"fields\" as a reference to an individual data element (ie: in MongoDB, this is called a \"field\") Further, fideslang has attributes that describe what kind of data is contained in this dataset. We use the following attributes to describe the data: Name Type Description name String The name of this field description String A description of what this field contains data_categories List[FidesKey] The data categories, or types of sensitive data as defined in the taxonomy, that can be found in this field data_qualifier FidesKey Data qualifier describes the level of deidentification for the dataset","title":"Understanding the Dataset Resource"},{"location":"tutorial/dataset/#create-dataset-annotations","text":"As you can see, fidesctl generate-dataset has already pre-filled the required attributes for this exported YAML file. We can update the YAML file with some information that might be appropriate for your organization, such as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 dataset : - fides_key : appdb organization_fides_key : default_organization name : Postgres App Database description : 'This is our primary web application database' collections : - name : users description : 'Table that contains all user account data as entered by the user' fields : - name : first_name description : 'Fides Generated Description for Column: first_name' data_categories : - user.provided.identifiable.name data_qualifier : aggregated.anonymized.unlinked_pseudonymized.pseudonymized.identified - name : zip_code description : 'Fides Generated Description for Column: zip_code' data_categories : - user.provided.identifiable.contact.postal_code data_qualifier : aggregated.anonymized.unlinked_pseudonymized PRO TIP As you're progressing with the tutorial, we recommend installing our Fides' VS Code plugin , which will validate the syntax in real-time as you're writing your resource files!","title":"Create Dataset Annotations"},{"location":"tutorial/dataset/#maintaining-a-dataset-resource","text":"As your business grows, you will add more databases and other services where you will be storing potentially sensitive data. We recommend that updating this resource file become a part of the development process when building a new feature.","title":"Maintaining a Dataset Resource"},{"location":"tutorial/dataset/#next-systems","text":"Now that we've seen how to annotate dataset resources (e.g. databases, flat-files) we can move up to the next layer, Systems .","title":"Next: Systems"},{"location":"tutorial/evaluate/","text":"Evaluate your policy In this section, we'll review how to evaluate your policy and address any errors. Now that we're done with all the setup, it's time to put your policy to the test! Run an Evaluation Running an evaluation locally is as easy as running a single line command from the CLI. Since we're running Fides locally, you can use the following command to evaluate your system: 1 fidesctl evaluate <path to resources> Or, alternatively, if you'd like to see the evaluation result from just a single resource type, you might try: 1 fidesctl evaluate system <path to resource> If that command returns a PASS evaluation, then you're now in a known-good state and ready to set up automated CI workflows to make sure your application stays compliant with each PR. However, if that command returns a FAILED evaluation, you should have received feedback as to why it failed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 root@fa175a43c077:/fides/fidesctl# fidesctl evaluate demo_resources Loading resource manifests from: demo_resources Taxonomy successfully created. ---------- Processing registry resources... CREATED 1 registry resources. UPDATED 0 registry resources. SKIPPED 0 registry resources. ---------- Processing dataset resources... CREATED 1 dataset resources. UPDATED 0 dataset resources. SKIPPED 0 dataset resources. ---------- Processing policy resources... CREATED 1 policy resources. UPDATED 0 policy resources. SKIPPED 0 policy resources. ---------- Processing system resources... CREATED 2 system resources. UPDATED 0 system resources. SKIPPED 0 system resources. ---------- Loading resource manifests from: demo_resources Taxonomy successfully created. Evaluating the following policies: demo_privacy_policy ---------- Checking for missing resources... Executing evaluations... Sending the evaluation results to the server... Evaluation passed! Congratulations, you've now created your annotated datasets, system-level business cases, and your policy for enforcement \u2014 you've laid the groundwork for a comprehensive data privacy software program at your organization! This is a great starting point for training your peers and colleagues on so they can evaluate their new code locally prior to committing any code to the repo. Next: Continuous Integration The final step will be to integrate this with your CI so that you can fully realize Fides' potential. Allowing Fides evaluate calls to be triggered from your pipeline will be critical for automatically assessing compliance at build time going forward.","title":"Evaluate your Resources"},{"location":"tutorial/evaluate/#evaluate-your-policy","text":"In this section, we'll review how to evaluate your policy and address any errors. Now that we're done with all the setup, it's time to put your policy to the test!","title":"Evaluate your policy"},{"location":"tutorial/evaluate/#run-an-evaluation","text":"Running an evaluation locally is as easy as running a single line command from the CLI. Since we're running Fides locally, you can use the following command to evaluate your system: 1 fidesctl evaluate <path to resources> Or, alternatively, if you'd like to see the evaluation result from just a single resource type, you might try: 1 fidesctl evaluate system <path to resource> If that command returns a PASS evaluation, then you're now in a known-good state and ready to set up automated CI workflows to make sure your application stays compliant with each PR. However, if that command returns a FAILED evaluation, you should have received feedback as to why it failed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 root@fa175a43c077:/fides/fidesctl# fidesctl evaluate demo_resources Loading resource manifests from: demo_resources Taxonomy successfully created. ---------- Processing registry resources... CREATED 1 registry resources. UPDATED 0 registry resources. SKIPPED 0 registry resources. ---------- Processing dataset resources... CREATED 1 dataset resources. UPDATED 0 dataset resources. SKIPPED 0 dataset resources. ---------- Processing policy resources... CREATED 1 policy resources. UPDATED 0 policy resources. SKIPPED 0 policy resources. ---------- Processing system resources... CREATED 2 system resources. UPDATED 0 system resources. SKIPPED 0 system resources. ---------- Loading resource manifests from: demo_resources Taxonomy successfully created. Evaluating the following policies: demo_privacy_policy ---------- Checking for missing resources... Executing evaluations... Sending the evaluation results to the server... Evaluation passed! Congratulations, you've now created your annotated datasets, system-level business cases, and your policy for enforcement \u2014 you've laid the groundwork for a comprehensive data privacy software program at your organization! This is a great starting point for training your peers and colleagues on so they can evaluate their new code locally prior to committing any code to the repo.","title":"Run an Evaluation"},{"location":"tutorial/evaluate/#next-continuous-integration","text":"The final step will be to integrate this with your CI so that you can fully realize Fides' potential. Allowing Fides evaluate calls to be triggered from your pipeline will be critical for automatically assessing compliance at build time going forward.","title":"Next: Continuous Integration"},{"location":"tutorial/overview/","text":"Tutorial Overview In this tutorial, we'll imagine that your business sells pizza online. \"Best Pizza Co\" has an ecommerce web application that you sell pizza through and an analytics tool that you use to maintain a constant inventory of pizzas to send and understand their buyers market. Your data ecosystem might look like this: When looking to expand to other international markets, you've decided to be intentional in how you scale your technology. Using Fides, we will show you how to: Declare what categories of PII you have in your 3 databases using Dataset annotations Create business-function related groupings for your applications using System privacy declarations Build a set of rules dictating what Best Pizza Co deems to be allowed use of PII data in your Policy When you're done creating these Datasets, Systems, and Policy, your Fides data model might look something like this: Next: Taxonomy Using these basic principles, you'll begin building a practice of data privacy awareness amongst the software teams at your company. Let's get started with the fundamentals by understanding the Fides language Taxonomy .","title":"Tutorial Overview"},{"location":"tutorial/overview/#tutorial-overview","text":"In this tutorial, we'll imagine that your business sells pizza online. \"Best Pizza Co\" has an ecommerce web application that you sell pizza through and an analytics tool that you use to maintain a constant inventory of pizzas to send and understand their buyers market. Your data ecosystem might look like this: When looking to expand to other international markets, you've decided to be intentional in how you scale your technology. Using Fides, we will show you how to: Declare what categories of PII you have in your 3 databases using Dataset annotations Create business-function related groupings for your applications using System privacy declarations Build a set of rules dictating what Best Pizza Co deems to be allowed use of PII data in your Policy When you're done creating these Datasets, Systems, and Policy, your Fides data model might look something like this:","title":"Tutorial Overview"},{"location":"tutorial/overview/#next-taxonomy","text":"Using these basic principles, you'll begin building a practice of data privacy awareness amongst the software teams at your company. Let's get started with the fundamentals by understanding the Fides language Taxonomy .","title":"Next: Taxonomy"},{"location":"tutorial/policy/","text":"Write Privacy Policy (as code) In this section, we'll review what the Policy resource is, how to create it and what it's used for. More than likely, there is someone in your organization that is responsible for creating privacy policies for protecting the company from a legal standpoint. The purpose of this privacy policy is to state what types of data are allowed for certain purposes of use. Understanding the policy This policy is comprised of rules that your system's privacy declarations are evaluated against. You might be able to help your legal counsel make this, or you can handle the creation of this if you understand the legal requirements well enough. Fides' privacy declarations provide rich metadata about your systems, the data categories they process, the data uses for that data, etc. Policies allow you to declare constraints on these declarations to decide what combinations to allow or reject at your company, providing a layer of automation to control data privacy at the source. For example, you might want policies like: - \"we only allow systems that use anonymized data for product analytics purposes\" - \"we do not allow systems to combine user-derived demographic and location data for marketing use\" - \"we never collect biometric data\" These are examples of \"policies\" that might be formal rules you follow today, or maybe they are already part of your code review or privacy review practices. Fides allows us to turn these into automated policy rules that are evaluated against your privacy declarations. Name Type Description fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' data_categories List[DataRule] The data categories, or types of sensitive data as defined in the taxonomy data_uses List[DataRule] Data use describes the various categories of data processing and operations at your organization data_subjects List[DataRule] The data subjects, or individual persons whose data your rule pertains to data_qualifier String The data qualifier describes the acceptable or non-acceptable level of deidentification action Choice A string, either ACCEPT or REJECT Writing your first policy To put these rules to the test, for example, if you know that you cannot use identifiable contact information for directly marketing to your customers, but you can use anonymized data for analytics purposes, you might write something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 policy : - fides_key : main_privacy_policy name : Main Privacy Policy description : The main privacy policy for the organization. rules : - fides_key : reject_direct_marketing name : Reject Direct Marketing description : Do not allow collection or storage of any identifiable contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - marketing_advertising_or_promotion data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT - fides_key : allow_anon_analytics name : Use only anonymized data for analytics description : Allow only anonymized data to be used for analytics purposes. data_categories : inclusion : ANY values : - user.provided.nonidentifiable data_uses : inclusion : ANY values : - improve_product_or_service data_subjects : inclusion : ANY values : - customer data_qualifier : aggregated.anonymized action : ALLOW This policy will evaluate the data subjects, data category, and data qualifier values against data use cases, which generates a boolean output to either allow or reject the process from proceeding. Maintaining a Policy As global privacy laws change and your business scales, your company's policy will evolve with them. We recommend that updating this resource file become a regular part of the development planning process when building a new feature. Next: Evaluation In the next section, we'll put all the pieces together to see the policy execute against all your resources by running Evaluations .","title":"Write Privacy Policy (as code)"},{"location":"tutorial/policy/#write-privacy-policy-as-code","text":"In this section, we'll review what the Policy resource is, how to create it and what it's used for. More than likely, there is someone in your organization that is responsible for creating privacy policies for protecting the company from a legal standpoint. The purpose of this privacy policy is to state what types of data are allowed for certain purposes of use.","title":"Write Privacy Policy (as code)"},{"location":"tutorial/policy/#understanding-the-policy","text":"This policy is comprised of rules that your system's privacy declarations are evaluated against. You might be able to help your legal counsel make this, or you can handle the creation of this if you understand the legal requirements well enough. Fides' privacy declarations provide rich metadata about your systems, the data categories they process, the data uses for that data, etc. Policies allow you to declare constraints on these declarations to decide what combinations to allow or reject at your company, providing a layer of automation to control data privacy at the source. For example, you might want policies like: - \"we only allow systems that use anonymized data for product analytics purposes\" - \"we do not allow systems to combine user-derived demographic and location data for marketing use\" - \"we never collect biometric data\" These are examples of \"policies\" that might be formal rules you follow today, or maybe they are already part of your code review or privacy review practices. Fides allows us to turn these into automated policy rules that are evaluated against your privacy declarations. Name Type Description fides_key FidesKey A fides key is an identifier label that must be unique within your organization. A fides_key can only contain alphanumeric characters and '_' data_categories List[DataRule] The data categories, or types of sensitive data as defined in the taxonomy data_uses List[DataRule] Data use describes the various categories of data processing and operations at your organization data_subjects List[DataRule] The data subjects, or individual persons whose data your rule pertains to data_qualifier String The data qualifier describes the acceptable or non-acceptable level of deidentification action Choice A string, either ACCEPT or REJECT","title":"Understanding the policy"},{"location":"tutorial/policy/#writing-your-first-policy","text":"To put these rules to the test, for example, if you know that you cannot use identifiable contact information for directly marketing to your customers, but you can use anonymized data for analytics purposes, you might write something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 policy : - fides_key : main_privacy_policy name : Main Privacy Policy description : The main privacy policy for the organization. rules : - fides_key : reject_direct_marketing name : Reject Direct Marketing description : Do not allow collection or storage of any identifiable contact info to use for marketing. data_categories : inclusion : ANY values : - user.provided.identifiable.contact data_uses : inclusion : ANY values : - marketing_advertising_or_promotion data_subjects : inclusion : ANY values : - customer data_qualifier : identified_data action : REJECT - fides_key : allow_anon_analytics name : Use only anonymized data for analytics description : Allow only anonymized data to be used for analytics purposes. data_categories : inclusion : ANY values : - user.provided.nonidentifiable data_uses : inclusion : ANY values : - improve_product_or_service data_subjects : inclusion : ANY values : - customer data_qualifier : aggregated.anonymized action : ALLOW This policy will evaluate the data subjects, data category, and data qualifier values against data use cases, which generates a boolean output to either allow or reject the process from proceeding.","title":"Writing your first policy"},{"location":"tutorial/policy/#maintaining-a-policy","text":"As global privacy laws change and your business scales, your company's policy will evolve with them. We recommend that updating this resource file become a regular part of the development planning process when building a new feature.","title":"Maintaining a Policy"},{"location":"tutorial/policy/#next-evaluation","text":"In the next section, we'll put all the pieces together to see the policy execute against all your resources by running Evaluations .","title":"Next: Evaluation"},{"location":"tutorial/system/","text":"Declare your Systems In this section, we'll review what a system resource is, why it's needed, and how it's created and managed. Now that we've built out the underlying databases that describe how the data is stored and what type of data is there, we're going to start grouping these into application-level \"systems\", another critical Fides resource. For Best Pizza Co, you can see that they have 2 business-unit specific applications, Web Application and Analytics : At Best Pizza Co, we'll have to create a System resource for each of the 2 systems above. Understanding Systems In Fides, Systems are used to model the applications, services, 3rd party APIs, etc that process data for your organization. Systems describe how these datasets are used for business functions around your organization. These dataset groupings are not mutually exclusive and answer the questions of \" How and why are these datasets being used? \" At Best Pizza Co, you might also have a \"Marketing\" system and a \"Financial data database\" (separate from the other dbs!), Systems use the following attributes: Name Type Description data_categories List[FidesKey] The data categories, or types of sensitive data as defined in the taxonomy data_subjects List[FidesKey] The data subjects, or individual persons whose data resides in your datasets data_use List[FidesKey] Data use describes the various categories of data processing and operations at your organization data_qualifier List[FidesKey] Data qualifier describes the level of deidentification for the dataset dataset_refereneces List[FidesKey] The fides_key(s) of the dataset fields used in this Privacy Declaration. As you can see, the System resource groups the lowest level of data (your datasets) with your business use cases and associates qualitative attributes describing what type of data is being used. Creating a System Resource Let's take a look at the following system annotations for a data analytics and marketing system: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 system : - fides_key : web_app name : Pizza Ordering Web Application description : A system used to order pizza from Best Pizza Co system_type : Service privacy_declarations : - name : Provide services and order tracking for customers. data_categories : - user.provided.identifiable.contact data_use : provide_product_or_service data_subjects : - customer data_qualifier : identified_data dataset_references : - appdb - fides_key : analytics name : Analytics system description : Provide BI and insights on customer, order and inventory data system_type : Service privacy_declarations : - name : Collect data for business intelligence data_categories : - user.provided.identifiable.contact - user.derived.identifiable.device data_use : improve_product_or_service data_subjects : - customer data_qualifier : identified_data As you can see, the system is comprised of Privacy Declarations. These can be read colloquially as \"This system uses sensitive data types of data_categories for data_subjects with the purpose of data_use at a deidentification level of data_qualifier \". You can create as many systems you'd like to cover all of your company's business applications. Maintaining a System Resource As business use cases evolve, your systems' data subjects, data categories and data uses will change with them. We recommend that updating this resource file become a regular part of the development planning process when building a new feature. As you add more systems to your ever-changing data ecosystem, you might want to consider grouping your systems into another Fides resource type, called a \"Registry\". This is just a logical grouping of Systems. Next: Policy With our datasets and systems in place, we've now declarated rich metadata about data privacy at Best Pizza Co. Now, we can enforce constraints on those declarations by writing Policies .","title":"Declare your Systems"},{"location":"tutorial/system/#declare-your-systems","text":"In this section, we'll review what a system resource is, why it's needed, and how it's created and managed. Now that we've built out the underlying databases that describe how the data is stored and what type of data is there, we're going to start grouping these into application-level \"systems\", another critical Fides resource. For Best Pizza Co, you can see that they have 2 business-unit specific applications, Web Application and Analytics : At Best Pizza Co, we'll have to create a System resource for each of the 2 systems above.","title":"Declare your Systems"},{"location":"tutorial/system/#understanding-systems","text":"In Fides, Systems are used to model the applications, services, 3rd party APIs, etc that process data for your organization. Systems describe how these datasets are used for business functions around your organization. These dataset groupings are not mutually exclusive and answer the questions of \" How and why are these datasets being used? \" At Best Pizza Co, you might also have a \"Marketing\" system and a \"Financial data database\" (separate from the other dbs!), Systems use the following attributes: Name Type Description data_categories List[FidesKey] The data categories, or types of sensitive data as defined in the taxonomy data_subjects List[FidesKey] The data subjects, or individual persons whose data resides in your datasets data_use List[FidesKey] Data use describes the various categories of data processing and operations at your organization data_qualifier List[FidesKey] Data qualifier describes the level of deidentification for the dataset dataset_refereneces List[FidesKey] The fides_key(s) of the dataset fields used in this Privacy Declaration. As you can see, the System resource groups the lowest level of data (your datasets) with your business use cases and associates qualitative attributes describing what type of data is being used.","title":"Understanding Systems"},{"location":"tutorial/system/#creating-a-system-resource","text":"Let's take a look at the following system annotations for a data analytics and marketing system: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 system : - fides_key : web_app name : Pizza Ordering Web Application description : A system used to order pizza from Best Pizza Co system_type : Service privacy_declarations : - name : Provide services and order tracking for customers. data_categories : - user.provided.identifiable.contact data_use : provide_product_or_service data_subjects : - customer data_qualifier : identified_data dataset_references : - appdb - fides_key : analytics name : Analytics system description : Provide BI and insights on customer, order and inventory data system_type : Service privacy_declarations : - name : Collect data for business intelligence data_categories : - user.provided.identifiable.contact - user.derived.identifiable.device data_use : improve_product_or_service data_subjects : - customer data_qualifier : identified_data As you can see, the system is comprised of Privacy Declarations. These can be read colloquially as \"This system uses sensitive data types of data_categories for data_subjects with the purpose of data_use at a deidentification level of data_qualifier \". You can create as many systems you'd like to cover all of your company's business applications.","title":"Creating a System Resource"},{"location":"tutorial/system/#maintaining-a-system-resource","text":"As business use cases evolve, your systems' data subjects, data categories and data uses will change with them. We recommend that updating this resource file become a regular part of the development planning process when building a new feature. As you add more systems to your ever-changing data ecosystem, you might want to consider grouping your systems into another Fides resource type, called a \"Registry\". This is just a logical grouping of Systems.","title":"Maintaining a System Resource"},{"location":"tutorial/system/#next-policy","text":"With our datasets and systems in place, we've now declarated rich metadata about data privacy at Best Pizza Co. Now, we can enforce constraints on those declarations by writing Policies .","title":"Next: Policy"},{"location":"tutorial/taxonomy/","text":"Understanding the Fides Taxonomy In this section, we'll review what the Fides taxonomy is, how it was created, when and how it should be used. (TODO: link to taxonomy reference) The Fides taxonomy for data categories is a standard adapted from ISO 19944 . This taxonomy provides descriptions of the types of sensitive, personally identifiable, or non-identifiable data that an organization could hold for any data subject. The hierarchical nature of the Fides taxonomy has a few notable benefits: Consistency: the taxonomy is used as a shared resource across your Fidesctl deployment(s). Because the taxonomy is derived from an international standard, it enables interoperability inside and outside of your organization. Natural inheritance: the hierarchy allows ease of reference to multiple subcategories or uncertain categorizations, simply by using a more superior data category. Extensibility: if the taxonomy is missing any data categories specific to your business, you can extend the taxonomy with whatever new values you need. The Fides Taxonomy is used across the Fides ecosystem of projects, fidesctl and fidesops. Why did we create the Fides Taxonomy? The Fides taxonomy was created because the industry is distinctly lacking a common definition of what Personal Data is, what identifiable data is, and how anonymized data has to be to be unidentifiable. The taxonomy provides this common classification and is a key component of implementing Privacy as Code. How to use the Fides Taxonomy The Fides project comes with 4 taxonomies of privacy attributes by default: Data Categories Data Subjects Data Uses Data Qualifiers Fidesctl comes loaded with these taxonomies by default and they can be found here fidesctl/src/fideslang/default_taxonomy.py . To extend this taxonomy for your business uses, you might want to add additional data categories to cover all the types of PII your business collects, or additional legal uses for the data. At Best Pizza Co, since we're expanding to new countries, we need to support Province, for example, as part of the user's provided address for delivery. We could accomplish this by adding the additional data category directly to default_taxonomy.py : (TODO: update this example to apply a Data Category resource file instead of editing source) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 + DataCategory( + fides_key=\"user.provided.identifiable.contact.province\", + organization_fides_key=\"default_organization\", + name=\"User Provided Province\", + description=\"User's province.\", + parent_key=\"user.provided.identifiable.contact\", + ), DataCategory( fides_key=\"user.provided.identifiable.contact.state\", organization_fides_key=\"default_organization\", name=\"User Provided State\", description=\"User's state level address data.\", parent_key=\"user.provided.identifiable.contact\", ), This will add the user.provided.identifiable.contact.province as a data category type as a subcategory of user.provided.identifiable.contact for your organization. You can add and remove any privacy attributes as you see fit for your organization. For a more in-depth definition of these privacy attributes, please refer to the Fides Resources documentation . Next: Datasets Now let's start writing some Fides declarations using the taxonomy, building up from the data layer with Datasets .","title":"Understanding the Fides Taxonomy"},{"location":"tutorial/taxonomy/#understanding-the-fides-taxonomy","text":"In this section, we'll review what the Fides taxonomy is, how it was created, when and how it should be used. (TODO: link to taxonomy reference) The Fides taxonomy for data categories is a standard adapted from ISO 19944 . This taxonomy provides descriptions of the types of sensitive, personally identifiable, or non-identifiable data that an organization could hold for any data subject. The hierarchical nature of the Fides taxonomy has a few notable benefits: Consistency: the taxonomy is used as a shared resource across your Fidesctl deployment(s). Because the taxonomy is derived from an international standard, it enables interoperability inside and outside of your organization. Natural inheritance: the hierarchy allows ease of reference to multiple subcategories or uncertain categorizations, simply by using a more superior data category. Extensibility: if the taxonomy is missing any data categories specific to your business, you can extend the taxonomy with whatever new values you need. The Fides Taxonomy is used across the Fides ecosystem of projects, fidesctl and fidesops.","title":"Understanding the Fides Taxonomy"},{"location":"tutorial/taxonomy/#why-did-we-create-the-fides-taxonomy","text":"The Fides taxonomy was created because the industry is distinctly lacking a common definition of what Personal Data is, what identifiable data is, and how anonymized data has to be to be unidentifiable. The taxonomy provides this common classification and is a key component of implementing Privacy as Code.","title":"Why did we create the Fides Taxonomy?"},{"location":"tutorial/taxonomy/#how-to-use-the-fides-taxonomy","text":"The Fides project comes with 4 taxonomies of privacy attributes by default: Data Categories Data Subjects Data Uses Data Qualifiers Fidesctl comes loaded with these taxonomies by default and they can be found here fidesctl/src/fideslang/default_taxonomy.py . To extend this taxonomy for your business uses, you might want to add additional data categories to cover all the types of PII your business collects, or additional legal uses for the data. At Best Pizza Co, since we're expanding to new countries, we need to support Province, for example, as part of the user's provided address for delivery. We could accomplish this by adding the additional data category directly to default_taxonomy.py : (TODO: update this example to apply a Data Category resource file instead of editing source) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 + DataCategory( + fides_key=\"user.provided.identifiable.contact.province\", + organization_fides_key=\"default_organization\", + name=\"User Provided Province\", + description=\"User's province.\", + parent_key=\"user.provided.identifiable.contact\", + ), DataCategory( fides_key=\"user.provided.identifiable.contact.state\", organization_fides_key=\"default_organization\", name=\"User Provided State\", description=\"User's state level address data.\", parent_key=\"user.provided.identifiable.contact\", ), This will add the user.provided.identifiable.contact.province as a data category type as a subcategory of user.provided.identifiable.contact for your organization. You can add and remove any privacy attributes as you see fit for your organization. For a more in-depth definition of these privacy attributes, please refer to the Fides Resources documentation .","title":"How to use the Fides Taxonomy"},{"location":"tutorial/taxonomy/#next-datasets","text":"Now let's start writing some Fides declarations using the taxonomy, building up from the data layer with Datasets .","title":"Next: Datasets"}]}